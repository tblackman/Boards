{"dependencies":[{"name":"free-style","loc":{"line":1,"column":27}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ensureStringObj = ensureStringObj;\nexports.explodeKeyframes = explodeKeyframes;\n\nvar _freeStyle = require(\"free-style\");\n\nvar FreeStyle = _interopRequireWildcard(_freeStyle);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * We need to do the following to *our* objects before passing to freestyle:\n * - For any `$nest` directive move up to FreeStyle style nesting\n * - For any `$unique` directive map to FreeStyle Unique\n * - For any `$debugName` directive return the debug name\n */\nfunction ensureStringObj(object) {\n  /** The final result we will return */\n  var result = {};\n  var debugName = '';\n  for (var key in object) {\n    /** Grab the value upfront */\n    var val = object[key];\n    /** TypeStyle configuration options */\n    if (key === '$unique') {\n      result[FreeStyle.IS_UNIQUE] = val;\n    } else if (key === '$nest') {\n      var nested = val;\n      for (var selector in nested) {\n        var subproperties = nested[selector];\n        result[selector] = ensureStringObj(subproperties).result;\n      }\n    } else if (key === '$debugName') {\n      debugName = val;\n    } else {\n      result[key] = val;\n    }\n  }\n  return { result: result, debugName: debugName };\n}\n// todo: better name here\nfunction explodeKeyframes(frames) {\n  var result = { $debugName: undefined, keyframes: {} };\n  for (var offset in frames) {\n    var val = frames[offset];\n    if (offset === '$debugName') {\n      result.$debugName = val;\n    } else {\n      result.keyframes[offset] = val;\n    }\n  }\n  return result;\n}"},"hash":"cf5fc0797a3e1677bd69730fefce0566"}