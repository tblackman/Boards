{"dependencies":[{"name":"./internal/typestyle","loc":{"line":1,"column":26}},{"name":"./types","loc":{"line":6,"column":23}},{"name":"./internal/utilities","loc":{"line":11,"column":39}}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stylesheet = exports.style = exports.reinit = exports.keyframes = exports.getStyles = exports.fontFace = exports.forceRenderStyles = exports.cssRule = exports.cssRaw = exports.setStylesTarget = exports.media = exports.classes = exports.extend = exports.types = exports.TypeStyle = undefined;\n\nvar _utilities = require(\"./internal/utilities\");\n\nObject.defineProperty(exports, \"extend\", {\n  enumerable: true,\n  get: function get() {\n    return _utilities.extend;\n  }\n});\nObject.defineProperty(exports, \"classes\", {\n  enumerable: true,\n  get: function get() {\n    return _utilities.classes;\n  }\n});\nObject.defineProperty(exports, \"media\", {\n  enumerable: true,\n  get: function get() {\n    return _utilities.media;\n  }\n});\nexports.createTypeStyle = createTypeStyle;\n\nvar _typestyle = require(\"./internal/typestyle\");\n\nvar _types = require(\"./types\");\n\nvar types = _interopRequireWildcard(_types);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nexports.TypeStyle = _typestyle.TypeStyle;\n/**\n * All the CSS types in the 'types' namespace\n */\n\nexports.types = types;\n/**\n * Export certain utilities\n */\n\n/** Zero configuration, default instance of TypeStyle */\nvar ts = new _typestyle.TypeStyle({ autoGenerateTag: true });\n/** Sets the target tag where we write the css on style updates */\nvar setStylesTarget = exports.setStylesTarget = ts.setStylesTarget;\n/**\n * Insert `raw` CSS as a string. This is useful for e.g.\n * - third party CSS that you are customizing with template strings\n * - generating raw CSS in JavaScript\n * - reset libraries like normalize.css that you can use without loaders\n */\nvar cssRaw = exports.cssRaw = ts.cssRaw;\n/**\n * Takes CSSProperties and registers it to a global selector (body, html, etc.)\n */\nvar cssRule = exports.cssRule = ts.cssRule;\n/**\n * Renders styles to the singleton tag imediately\n * NOTE: You should only call it on initial render to prevent any non CSS flash.\n * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.\n **/\nvar forceRenderStyles = exports.forceRenderStyles = ts.forceRenderStyles;\n/**\n * Utility function to register an @font-face\n */\nvar fontFace = exports.fontFace = ts.fontFace;\n/**\n * Allows use to use the stylesheet in a node.js environment\n */\nvar getStyles = exports.getStyles = ts.getStyles;\n/**\n * Takes keyframes and returns a generated animationName\n */\nvar keyframes = exports.keyframes = ts.keyframes;\n/**\n * Helps with testing. Reinitializes FreeStyle + raw\n */\nvar reinit = exports.reinit = ts.reinit;\n/**\n * Takes CSSProperties and return a generated className you can use on your component\n */\nvar style = exports.style = ts.style;\n/**\n * Takes an object where property names are ideal class names and property values are CSSProperties, and\n * returns an object where property names are the same ideal class names and the property values are\n * the actual generated class names using the ideal class name as the $debugName\n */\nvar stylesheet = exports.stylesheet = ts.stylesheet;\n/**\n * Creates a new instance of TypeStyle separate from the default instance.\n *\n * - Use this for creating a different typestyle instance for a shadow dom component.\n * - Use this if you don't want an auto tag generated and you just want to collect the CSS.\n *\n * NOTE: styles aren't shared between different instances.\n */\nfunction createTypeStyle(target) {\n  var instance = new _typestyle.TypeStyle({ autoGenerateTag: false });\n  if (target) {\n    instance.setStylesTarget(target);\n  }\n  return instance;\n}"},"hash":"c2472a2eadf2f79435dc8c7f56e42569"}